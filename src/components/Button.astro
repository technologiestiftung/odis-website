---
import { cn } from "@/utils/classNames";
import type { HTMLAttributes, HTMLTag } from "astro/types";

export type Props<T extends HTMLTag> = HTMLAttributes<T> & {
  tag?: T;
  variant?: "primary" | "secondary";
  inverted?: boolean;
};

const {
  variant = "primary",
  inverted = false,
  tag = "a",
  class: className,
  ...props
} = Astro.props;

const isPrimary = variant === "primary";
const finalTailwindClasses = cn(
  inverted && `border-line-inv focus-visible:ring-offset-bg-inv`,
  !inverted && `border-line text-links bg-bg focus-visible:ring-offset-bg`,
  isPrimary &&
    cn(
      `font-bold`,
      inverted && `shadow-primary-inv bg-bg dark:bg-[var(--white)] text-links`,
      inverted && `hover-hover:hover:shadow-primary-inv-md`,
      inverted && `border-line-dark`,
      !inverted && `shadow-primary hover-hover:hover:shadow-primary-md`,
      `dark:border-[var(--white)] dark:text-bg dark:bg-[var(--white)] `,
      inverted && `dark:shadow-primary-inv`,
    ),
  !isPrimary &&
    cn(
      inverted && `shadow-secondary-inv bg-bg-inv text-links-inv`,
      inverted && `hover-hover:hover:shadow-secondary-inv-md`,
      !inverted && `shadow-secondary hover-hover:hover:shadow-secondary-md`,
      `dark:border-line dark:text-text dark:bg-line`,
    ),
  `dark:hover-hover:hover:bg-bg-alt dark:hover-hover:hover:text-links`,
  `dark:hover-hover:hover:border-line-dark`,
  `hover-hover:hover:text-links`,
  `hover-hover:hover:bg-bg-alt`,
  `inline-block py-4 px-6 border-2`,
  `transition motion-reduce:transition-none`,
  `focus-visible:outline-none focus-visible:ring-4`,
  `focus-visible:ring-links/50`,
  `focus-visible:shadow-none`,
  `hover-hover:hover:focus-visible:shadow-none`,
  `focus-visible:ring-offset-4`,
  `cursor-pointer`,
  className,
);

const Tag = tag;
---

<Tag {...props} class={finalTailwindClasses}>
  <slot />
</Tag>
