<div
  class="pt-16 flex flex-col gap-6 order-first lg:order-last lg:col-start-9 lg:col-span-3 z-0"
>
  <div class="sticky w-full top-6 lg:pb-48" id="toc-target">
    <span id="toc-label" class="font-bold text-headlines">Auf dieser Seite</span
    >
  </div>
</div>

<script>
  function slugify(text: string) {
    return text
      .toString()
      .toLowerCase()
      .replace(/\s+/g, "-") // Replace spaces with -
      .replace(/[^\w-]+/g, "") // Remove all non-word chars
      .replace(/--+/g, "-") // Replace multiple - with single -
      .replace(/^-+/, "") // Trim - from start of text
      .replace(/-+$/, ""); // Trim - from end of text
  }
  function slugifyGerman(string: string) {
    return slugify(
      string
        .replace(/[äÄ]/g, "ae")
        .replace(/[öÖ]/g, "oe")
        .replace(/[üÜ]/g, "ue")
        .replace(/[ß]/g, "ss"),
    );
  }

  function createTableOfContents(contentSelector: string, targetId: string) {
    const content = [
      ...document.querySelectorAll(contentSelector),
    ] as HTMLElement[];
    const headings = content.reduce(
      (acc, tocContentNode) =>
        [
          ...acc,
          ...tocContentNode.querySelectorAll("h2, h3, h4, h5, h6"),
        ] as HTMLElement[],
      [] as HTMLElement[],
    );

    headings.forEach((heading) => heading.removeAttribute("id"));

    const toc = document.createElement("nav");
    toc.setAttribute("id", "toc");
    toc.setAttribute("aria-label", "Table of Contents");

    let currentLevel = 0;
    const lists: HTMLUListElement[] = [];

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const link = toc.querySelector(`a[href="#${entry.target.id}"]`);
        if (link && entry.isIntersecting) {
          link.classList.add("font-bold", "dark:text-text");
        } else if (link) {
          link.classList.remove("font-bold", "dark:text-text");
        }
      });
    });

    headings.forEach((heading) => {
      const slug = slugifyGerman(heading.textContent || "untitled");
      const level = parseInt(heading.tagName.slice(1));

      while (level < currentLevel) {
        lists.pop();
        currentLevel--;
      }

      if (level > currentLevel) {
        const newList = document.createElement("ul");
        newList.classList.add("flex", "flex-col", "list-none", "gap-4", "pt-4");
        if (currentLevel > 0) {
          newList.classList.add("pl-4");
        }
        if (lists.length === 0) {
          toc.appendChild(newList);
        } else if (lists.at(-1)?.lastChild) {
          lists.at(-1)?.lastChild?.appendChild(newList);
        } else {
          lists.at(-1)?.appendChild(newList);
        }
        lists.push(newList);
        currentLevel = level;
      }

      const listItem = document.createElement("li");
      const link = document.createElement("a");
      const text = document.createTextNode(heading.textContent || "untitled");

      const headingLink = document.createElement("a");
      headingLink.setAttribute("id", slug);
      headingLink.setAttribute("href", "#" + slug);
      const linkClasses = [
        "block",
        "text-links",
        "hover-hover:hover:text-links-active",
        "dark:hover-hover:hover:text-links-active",
        "dark:hover-hover:hover:bg-text",
        "w-fit",
        "px-2",
        "-ml-2",
        "no-underline",
        "focusable",
        "dark:hover-hover:hover:ml-0",
        "transition-all",
        "duration-1000",
        "ease-out-extreme",
      ];
      headingLink.classList.add(...linkClasses);
      headingLink.appendChild(heading.cloneNode(true));
      heading.parentNode?.replaceChild(headingLink, heading);

      observer.observe(headingLink);

      link.setAttribute("href", "#" + slug);
      link.appendChild(text);
      link.classList.add(...linkClasses);
      listItem.appendChild(link);
      lists.at(-1)?.appendChild(listItem);
    });

    const target = document.getElementById(targetId) as HTMLElement;
    if (headings.length === 0) {
      target.innerHTML = "";
    }

    target.appendChild(toc);
  }

  createTableOfContents(".toc-content", "toc-target");
</script>
