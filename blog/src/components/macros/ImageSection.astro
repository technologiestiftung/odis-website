---
import { Image } from "astro:assets";
import { cn } from "../../utils/classNames";
import { getImageFromFiles, type AstroImageType } from "../../utils/imageUtil";
export type Props = {
  src: string;
  caption?: string;
  alt?: string;
  withShadow?: boolean;
  fullWidth?: boolean;
};

const {
  src,
  alt,
  caption,
  withShadow = false,
  fullWidth = false,
} = Astro.props;

// Optimizing images for quick loading
const images = await Astro.glob<AstroImageType>(
  "../../**/images/**/*.{jpg,jpeg,png,gif,svg}",
);

let imageOptimized;
if (src) {
  imageOptimized = getImageFromFiles({ images, identifier: src });
  if (!imageOptimized)
    throw new Error(
      `The image defined in "ImageSection" could not be found: ${src}`,
    );
}
---

<figure
  class={cn(
    "mt-10 mb-0",
    fullWidth &&
      "sm:w-screen sm:max-w-[100vw] sm:ml-[calc((var(--gridGap)+var(--marginSize))*-1)] lg:ml-[calc((var(--marginSize)+(var(--gridGap)*2)+var(--columnSize))*-1)]",
  )}
>
  <div class={cn("relative")}>
    {
      imageOptimized && (
        <Image
          src={imageOptimized}
          alt={alt || caption || ""}
          class={cn("my-0 w-full max-w-full", withShadow && "shadow-xl")}
        />
      )
    }
    {
      withShadow && (
        <div
          class="absolute pointer-events-none inset-0 ring-1 ring-inset ring-text opacity-10"
          aria-hidden="true"
        />
      )
    }
  </div>
  {
    caption && (
      <figcaption
        class="
          mt-2 text-xs opacity-70 transition-opacity
          hover:opacity-100 focus-visible:opacity-100
          focusable
        "
        tabindex="0"
      >
        {caption}
      </figcaption>
    )
  }
</figure>
